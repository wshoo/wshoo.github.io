<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on wshoo的博客</title>
    <link>https://wshoo.github.io/tags/python/</link>
    <description>Recent content in python on wshoo的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 23 Feb 2019 06:18:30 +0800</lastBuildDate>
    
	<atom:link href="https://wshoo.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>xlwings 模块</title>
      <link>https://wshoo.github.io/post/xlwings/</link>
      <pubDate>Sat, 23 Feb 2019 06:18:30 +0800</pubDate>
      
      <guid>https://wshoo.github.io/post/xlwings/</guid>
      <description>打开已保存的Excel文档 # 导入xlwings模块，打开Excel程序，默认设置：程序可见，只打开不新建工作薄，屏幕更新关闭 import xlwings as xw app=xw.App(visible=True,add_book=False) app.display_alerts=False app.screen_updating=False # 文件位置：filepath，打开test文档，然后保存，关闭，结束程序 filepath=r&amp;rsquo;g:\Python Scripts\test.xlsx&amp;rsquo; wb=app.books.open(filepath) wb.save() wb.close() app.quit() 新建Excel文档，命名为test.xlsx，并保存在D盘。 import xlwings as xw app=xw.App(visible=True,add_book=False) wb=app.books.add() wb.save(r&amp;rsquo;d:\test.xlsx&amp;rsquo;) wb.close() app.quit() 在单元格输入值 新建test.xlsx，在sheet1的第一个单元格输入 “人生” ，然后保存关闭，退出Excel程序。 import xlwings as xw app=xw.App(visible=True,add_book=False) wb=app.books.add() # wb就是新建的工作簿(workbook)，下面则对wb的sheet1的A1单元格赋值 wb.sheets[&amp;lsquo;sheet1&amp;rsquo;].range(&amp;lsquo;A1&amp;rsquo;).value=&amp;lsquo;人生&amp;rsquo; wb.save(r&amp;rsquo;d:\test.xlsx&amp;rsquo;) wb.close() app.quit() 打开已保存的test.xlsx，在sheet2的第二个单元格输入“苦短”，然后保存关闭，退出Excel程序 import xlwings as xw app=xw.App(visible=True,add_book=False) wb=app.books.open(r&amp;rsquo;d:\test.xlsx&amp;rsquo;) # wb就是新建的工作簿(workbook)，下面则对wb的sheet1的A1单元格赋值 wb.sheets[&amp;lsquo;sheet1&amp;rsquo;].range(&amp;lsquo;A1&amp;rsquo;).value=&amp;lsquo;苦短&amp;rsquo; wb.save() wb.close() app.quit() 掌握以上代码，已经完全可以把Excel当作一个txt文本进行数据储存了，也可以读取Excel文件的数据，进行计算后，并将结果保存在Excel中。  引用工作簿、工作表和单元格  引用工作簿，注意工作簿应该首先被打开 wb.=xw.books[&amp;lsquo;工作簿的名字‘] 引用活动工作簿 wb=xw.books.active 引用工作簿中的sheet sht=xw.books[&amp;lsquo;工作簿的名字‘].sheets[&amp;lsquo;sheet的名字&amp;rsquo;] # 或者 wb=xw.</description>
    </item>
    
    <item>
      <title>Multiprocessing 模块</title>
      <link>https://wshoo.github.io/post/python%E6%A8%A1%E5%9D%97-multiprocessing/</link>
      <pubDate>Wed, 23 Jan 2019 06:18:30 +0800</pubDate>
      
      <guid>https://wshoo.github.io/post/python%E6%A8%A1%E5%9D%97-multiprocessing/</guid>
      <description>众所周知，Python中的GIL限制了Python多线程并行对多核CPU的利用，但是我们仍然可以通过各种其他的方式来让Python真正利用多核资源, 例如通过C/C++扩展来实现多线程/多进程, 以及直接利用Python的多进程模块multiprocessing来进行多进程编程。
 多进程 Multiprocessing 模块 Process 类 Process 类用来描述一个进程对象。创建子进程的时候，只需要传入一个执行函数和函数的参数即可完成 Process 示例的创建。
multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None) # target -- 函数名 # args -- tuple形式参数   star() 启动进程 join() 进程同步，等待所有进程退出 close() 阻止多余的进程涌入进程池pool造成进程阻塞  eg.
import multiprocessing import os def run_proc(name): print(&#39;Child process {0} PID:{1}&#39;.format(name, os.getpid())) # os.getpid() 获取当前进程pid if __name__ == &#39;__main__&#39;: print(&#39;Parent process {0} is Running&#39;.format(os.getpid())) for i in range(5): p = multiprocessing.Process(target=run_proc, args=(str(i),)) print(&#39;process start&#39;) p.</description>
    </item>
    
    <item>
      <title>super()和__init__()</title>
      <link>https://wshoo.github.io/post/python%E7%B1%BB%E4%B8%ADsuper%E5%92%8C__init__%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 23 Jan 2019 06:18:30 +0800</pubDate>
      
      <guid>https://wshoo.github.io/post/python%E7%B1%BB%E4%B8%ADsuper%E5%92%8C__init__%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>##单继承时super()和init()实现的功能是类似的
class Base(object): def __init__(self): print &#39;Base create&#39; class childA(Base): def __init__(self): print &#39;creat A &#39;, Base.__init__(self) class childB(Base): def __init__(self): print &#39;creat B &#39;, super(childB, self).__init__() base = Base() a = childA() b = childB()  输出结果：
Base create creat A Base create creat B Base create  区别是使用super()继承时不用显式引用基类。
##super()只能用于新式类中
把基类改为旧式类，即不继承任何基类
class Base(): def __init__(self): print &#39;Base create&#39;  执行时，在初始化b时就会报错：
super(childB, self).__init__() TypeError: must be type, not classobj  ##super不是父类，而是继承顺序的下一个类 在多重继承时会涉及继承顺序，super（）相当于返回继承顺序的下一个类，而不是父类，类似于这样的功能：</description>
    </item>
    
  </channel>
</rss>